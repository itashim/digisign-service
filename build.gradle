plugins {
    id 'java'
}

group = 'kz.bsbnb.portal'
version '1.0-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.14'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.8'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.7.0'

    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    //implementation files('libs/bcprov-1.45.jar')
    implementation files('libs/kalkancrypt-0.1.1.jar')
    implementation files('libs/kalkancrypt_xmldsig-0.1.jar')
    implementation files('libs/xmlsec-1.4.4.jar')
    implementation files('libs/knca_provider_util-0.7.jar')
    implementation files('libs/crypto.gammaprov.jar')
    implementation files('libs/gammaprov11.jar')
    implementation files('libs/cmp.jar')
    implementation files('libs/crypto.tsp.jar')
    implementation files('libs/osdt_xkms.jar')

    implementation("io.springfox:springfox-swagger2:2.9.2") {
        exclude module: 'mapstruct' // necessary in my case to not end up with multiple mapstruct versions
    }
    implementation group: 'io.springfox', name: 'springfox-spring-web', version: '2.9.2'
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'

    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

task prepareKotlinBuildScriptModel{}